pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- cornell box
-- by freds72

-- real-time shadows using shadow casters and polygon clipping
-- described in: http://people.csail.mit.edu/ericchan/bib/pdf/p275-atherton.pdf

-- game globals
local time_t,time_dt=0,1/30

-- register json context here
function nop() return true end

-- player
local plyr
local actors={}
-- models
local all_models={}

-- camera
local cam
local face_id=0
-- light pos (ceil lamp)
local light_p={0,3.2,0}

function clone(src,dst)
	dst=dst or {}
	for k,v in pairs(src) do
		if(not dst[k]) dst[k]=v
	end
	-- randomize selected values
	if src.rnd then
		for k,v in pairs(src.rnd) do
			-- don't overwrite values
			if not dst[k] then
				dst[k]=v[3] and rndarray(v) or rndlerp(v[1],v[2])
			end
		end
	end
	return dst
end

function lerp(a,b,t)
	return a*(1-t)+b*t
end
function rndlerp(a,b)
	return lerp(b,a,1-rnd())
end
function smoothstep(t)
	t=mid(t,0,1)
	return t*t*(3-2*t)
end
function rndrng(ab)
	return flr(rndlerp(ab[1],ab[2]))
end
function rndarray(a)
	return a[flr(rnd(#a))+1]
end
function lerparray(a,t)
	return a[mid(flr((#a-1)*t+0.5),1,#a)]
end

-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 for num_sorted=1,#data-1 do 
  local new_val=data[num_sorted+1]
  local new_val_key,i=new_val.key,num_sorted+1

  while i>1 and new_val_key>data[i-1].key do
   data[i]=data[i-1]   
   i-=1
  end
  data[i]=new_val
 end
end

-- vector math
-- world axis
local v_fwd,v_right,v_up,v_zero={0,0,1},{1,0,0},{0,1,0},function() return {0,0,0} end

function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function make_v_cross(a,b)
	local ax,ay,az=a[1],a[2],a[3]
	local bx,by,bz=b[1],b[2],b[3]
	return {ay*bz-az*by,az*bx-ax*bz,ax*by-ay*bx}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_sqr(a)
	return {a[1]*a[1],a[2]*a[2],a[3]*a[3]}
end
function v_normz(v)
	local d=v_dot(v,v)
	if d>0.001 then
		d=d^0.5
		v[1]/=d
		v[2]/=d
		v[3]/=d
	end
	return d
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end
function v_min(a,b)
	return {min(a[1],b[1]),min(a[2],b[2]),min(a[3],b[3])}
end
function v_max(a,b)
	return {max(a[1],b[1]),max(a[2],b[2]),max(a[3],b[3])}
end

-- 3x3 matrix functions
function make_m(x,y,z)
	return {
		x or 1,0,0,
		0,y or 1,0,
		0,0,z or 1}
end
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	return {m[1]*x+m[4]*y+m[7]*z,m[2]*x+m[5]*y+m[8]*z,m[3]*x+m[6]*y+m[9]*z}
end
-- inplace matrix multiply invert
function m_inv_x_v(m,v,p)
	local x,y,z=v[1],v[2],v[3]
	v[1],v[2],v[3]=m[1]*x+m[2]*y+m[3]*z,m[4]*x+m[5]*y+m[6]*z,m[7]*x+m[8]*y+m[9]*z
end

function m_scale(m,scale)
	for i=1,#m do
		m[i]*=scale
	end
end
-- matrix transpose
function m_transpose(m)
	return {
		m[1],m[4],m[7],
		m[2],m[5],m[8],
		m[3],m[6],m[9]}
end
-- returns right vector from matrix
function m_right(m)
	return {m[1],m[2],m[3]}
end
-- returns up vector from matrix
function m_up(m)
	return {m[4],m[5],m[6]}
end
-- returns foward vector from matrix
function m_fwd(m)
	return {m[7],m[8],m[9]}
end

-- quaternion
function make_q(v,angle)
	angle/=2
	-- fix pico sin
	local s=-sin(angle)
	return {v[1]*s,
	        v[2]*s,
	        v[3]*s,
	        cos(angle)}
end
function q_clone(q)
	return {q[1],q[2],q[3],q[4]}
end
function q_normz(q)
	local d=v_dot(q,q)+q[4]*q[4]
	if d>0 then
		d=d^0.5
		q[1]/=d
		q[2]/=d
		q[3]/=d
		q[4]/=d
	end
end
function q_dydt(q,v,dt)
	local dq={v[1]*dt,v[2]*dt,v[3]*dt,0}
	q_x_q(dq,q)

	q[1]+=0.5*dq[1]
	q[2]+=0.5*dq[2]
	q[3]+=0.5*dq[3]
	q[4]+=0.5*dq[4]
	q_normz(q)
end

function q_x_q(a,b)
	local qax,qay,qaz,qaw=a[1],a[2],a[3],a[4]
	local qbx,qby,qbz,qbw=b[1],b[2],b[3],b[4]
        
	a[1]=qax*qbw+qaw*qbx+qay*qbz-qaz*qby
	a[2]=qay*qbw+qaw*qby+qaz*qbx-qax*qbz
	a[3]=qaz*qbw+qaw*qbz+qax*qby-qay*qbx
	a[4]=qaw*qbw-qax*qbx-qay*qby-qaz*qbz
end
function m_from_q(q)
	local x,y,z,w=q[1],q[2],q[3],q[4]
	local x2,y2,z2=x+x,y+y,z+z
	local xx,xy,xz=x*x2,x*y2,x*z2
	local yy,yz,zz=y*y2,y*z2,z*z2
	local wx,wy,wz=w*x2,w*y2,w*z2

	return {
		1-(yy+zz),xy+wz,xz-wy,
		xy-wz,1-(xx+zz),yz+wx,
		xz+wy,yz-wx,1-(xx+yy)}
end

-->8
-- actors & camera
update_plyr=function(self)
	-- damping
	self.roll*=0.8
	self.pitch*=0.85
	return true
end

local all_actors={	
	cube={
		model="cube",
		update=function(self)
			self.pos[1]=2.5*cos(time_t/240)
			return true
		end
	},
	ground={
		model="cornell",
		update=nop
	},
	shader={
		model="cube",
		update=function(self)
			local q=make_q({cos(time_t/240),0,sin(time_t/240)},time_t/240)
			self.q=q
			self.m=m_from_q(q)
			self.pos[1]=1.5*cos(time_t/240)
			self.pos[3]=1.5*sin(time_t/240)
			return true
		end
	},
	torus={
		model="torus",
		update=function(self)
			local q=make_q({cos(time_t/300),0,sin(time_t/300)},time_t/300)
			self.q=q
			self.m=m_from_q(q)
			self.pos[1]=1.5*cos(time_t/250)
			self.pos[3]=1+1.5*sin(time_t/250)
			return true
		end
	}
}

function make_plyr(x,y,z,angle)
	local p={
		acc=0.05,
		pos={x,y,z},
		q=make_q(v_up,angle or 0),
		roll=0,
		pitch=0,
		update=update_plyr
	}
	p.m=m_from_q(p.q)
	add(actors,p)
	return p
end

function make_actor(src,p,q)
	-- instance
	local a=clone(src,{
		pos=v_clone(p),		
		q=q or make_q(v_up,0)
	})
	a.model=all_models[src.model]
	-- init orientation
	a.m=m_from_q(a.q)
	return add(actors,a)
end

function make_cam(x0,y0,focal)
	-- clip planes
	local znear,zfar=0.25,32
	local z_planes={
		{0,0,zfar},
		{0,0,znear}}
	local z_normals={
		{0,0,1},
		{0,0,-1}}

	local c={
		pos={0,0,3},
		q=make_q(v_up,0),
		update=function(self)
			self.m=m_transpose(m_from_q(self.q))
		end,
		track=function(self,pos,q)
			self.pos,q=v_clone(pos),q_clone(q)
			self.q=q
		end,
		-- project cam-space points into 2d
		project2d=function(self,v)
			-- view to screen
 			local w=focal/v[3]
 			return x0+v[1]*w,y0-v[2]*w
		end,
		-- draw the given vertices using function fn
		-- performs cam space clipping
		draw=function(self,fn,v,c)
 		-- clip loop
			for i=1,#z_planes do
				local pp,pn=z_planes[i],z_normals[i]
				v=plane_poly_clip(pn,pp,v)
			end
			fn(v,c)
		end
	}
	return c
end

-- handle player inputs
function control_plyr(self)
	
	local dx,dy,dz=0,0,0
	if btn(5) then
		local pitch,roll=0,0
		if(btn(0)) roll=1
		if(btn(1)) roll=-1
		if(btn(2)) dz=-1
		if(btn(3)) dz=1

		self.roll+=roll
	
		local q=make_q(v_up,self.roll/256)
		q_x_q(q,plyr.q)
		-- avoid matrix skew
		q_normz(q)
		local m=m_from_q(q)

		self.m,self.q=m,q
	else
		if(btn(0)) dx=1
		if(btn(1)) dx=-1
		if(btn(2)) dy=-1
		if(btn(3)) dy=1
	end

	local dv={dx,dy,dz}
	dv=m_x_v(self.m,dv)
	v_add(self.pos,dv,self.acc)
end

-->8
-- zbuffer
local drawables={}
function zbuf_clear()
	drawables={}
end
function zbuf_draw()
	local objs={}
	-- steps:
	-- collect visibles faces (world space)
	-- clip (camera)
	-- clip (shadow volumes)
	-- project cam space
	-- sort
	-- render
	local faces,light_faces={},{}
	face_id=0
	for _,d in pairs(drawables) do
		collect_faces(d.model,d.pos,d.m,faces,light_faces)
	end
	
	-- add shadows to all faces
	for _,f in pairs(faces) do
		-- shadows on light faces only
		if f.light==true then
			-- clip face with light volumes
 		for _,sf in pairs(light_faces) do
 			-- don't self clip
 			if sf.id!=f.id then
 				-- per-face shadow polygon
 				-- clip against near face
 				local shadow_v=plane_poly_clip(sf.n,sf.v[1],f.v)
 				-- 
 				if #shadow_v>2 then
 					-- clip against caster edges
 					local pv0=sf.v[#sf.v]
 					for i=1,#sf.v do
 						local pv1=sf.v[i]
 						local pn=sf.pn[i]
 						-- generate plane normal + cache
 						if not pn then
 							local ln=make_v(light_p,pv0)
 							pn=make_v(pv0,pv1)
 							pn=make_v_cross(pn,ln)
 							v_normz(pn)
 							sf.pn[i]=pn
 						end
 						
 						-- clip current face
 						shadow_v=plane_poly_clip(pn,pv0,shadow_v)
 			
 						-- next shadow edge
 		 				pv0=pv1
 					end
 					-- attach shadow poly to face
 					add(f.shadows,shadow_v)
 				end
 			end
 		end
	 end
	end

	-- project in cam space
	for _,f in pairs(faces) do
		local z=0
		for i=1,#f.v do
			f.v[i]=m_x_v(cam.m,make_v(cam.pos,f.v[i]))
			-- depth
			z+=f.v[i][3]
		end
		-- for z-sorting
		f.key=z/#f.v
		-- any shadow poly?
		for _,v in pairs(f.shadows) do 
			for i=1,#v do
				v[i]=m_x_v(cam.m,make_v(cam.pos,v[i]))
			end
		end
		objs[#objs+1]=f
	end
	
	-- z-sorting
	sort(objs)

	-- actual draw
	for i=1,#objs do
		local o=objs[i]
		cam:draw(polyfill,o.v,o.light==true and o.c or sget(8,o.c))
		-- shadow color
		local sc=sget(8,o.c)
		for _,v in pairs(o.shadows) do
			cam:draw(polyfill,v,sc)
		end
	end
end

function zbuf_filter(array)
	for _,a in pairs(array) do
		if not a:update() then
			del(array,a)
		elseif a.model then
			drawables[#drawables+1]=a
		end
	end
end

-- sutherland-hodgman clipping
-- returns clipped vertices
function plane_poly_clip(n,p,v)
	local dist,allin={}
	for i=1,#v do
		dist[i]=v_dot(make_v(v[i],p),n)
		allin=band(allin,dist[i]>0)
	end
	-- early exit
	if(allin==true) return v
	
	local res={}
	local v0,d0=v[#v],dist[#v]
	for i=1,#v do
		local v1,d1=v[i],dist[i]
		if d1>0 then
			if d0<=0 then
				local r=make_v(v0,v1)
				v_scale(r,d0/(d0-d1))
				v_add(r,v0)
				res[#res+1]=r
			end
			res[#res+1]=v1
		elseif d0>0 then
			local r=make_v(v0,v1)
			v_scale(r,d0/(d0-d1))
			v_add(r,v0)
			res[#res+1]=r
		end
		v0,d0=v1,d1
	end
	return res
end

-- collect visible faces
function collect_faces(model,pos,m,out,out_casters)
	-- cam pos in object space
	local cam_pos=make_v(pos,cam.pos)
	m_inv_x_v(m,cam_pos)

	-- light pos in object space
	local l_pos=make_v(pos,light_p)
	m_inv_x_v(m,l_pos)

	--
	local v_cache={} 
	for i=1,#model.f do
		local f,n=model.f[i],model.n[i]
		-- unique face id
		face_id+=1
		-- cam facing?
		-- light facing?
		local light_facing=f.cast_shadows!=true or v_dot(n,l_pos)>=model.cp[i]
		local cam_facing,is_caster=v_dot(n,cam_pos)>=model.cp[i],f.double_sided or light_facing
		-- edge case for single face polys
		if(f.double_sided and cam_facing==false) cam_facing,light_facing=true,not light_facing
		-- viz calculation
		local vertices={}
		if cam_facing or is_caster then
			-- project vertices
			for k=1,#f.vi do
				local vi=f.vi[k]
				local v=v_cache[vi]
				if not v then
					v=m_x_v(m,model.v[vi])
					v_add(v,pos)
					v_cache[vi]=v
				end
				vertices[#vertices+1]=v
			end
		end
		if cam_facing then
			out[#out+1]={v=vertices,c=f.c,id=face_id,light=light_facing,shadows={}}
		end
		-- shadow caster
		if is_caster and f.cast_shadows then
			-- include face normal in world space
			add(out_casters,{v=vertices,id=face_id,n=m_x_v(m,n),pn={}})
		end
	end
end

-->8
-- game loop
local scene=0
local help_msg={
	{txt="🅾️ change scene"},
	{txt="⬅️⬇️⬆️➡️ move"},
	{txt="❎+⬅️➡️ rotate"},
	{txt="❎+⬇️⬆️ pan"},
	{txt=""}
}

function _update()
	time_t+=1

	zbuf_clear()
	
	-- switch scene?
	if btnp(4) then
		scene=(scene+1)%2
		actors={}

		if scene==0 then
			make_actor(all_actors.ground,{0,0,0})
			make_actor(all_actors.shader,{0,0,0})
			make_actor(all_actors.cube,{2.5,-2.5,2})
		else
			make_actor(all_actors.ground,{0,0,0})
			make_actor(all_actors.torus,{0,0,0})
		end
		--
		add(actors,plyr)				
	end
	
	control_plyr(plyr)

	-- update cam
	cam:track(plyr.pos,plyr.q)
	
	zbuf_filter(actors)

	-- must be done after update loop
	cam:update()

end

function _draw()
	cls()

	zbuf_draw()

	local msg=	"∧"..flr(100*stat(1)).."%"
	print(msg,2,3,2)
	print(msg,2,2,8)
	
	msg=help_msg[(flr(time_t/60)%#help_msg)+1]
	print(msg.txt,2,121,1)	
	print(msg.txt,2,120,7)	
end

function _init()

	unpack_models()

	cam=make_cam(63.5,63.5,63.5)

	make_actor(all_actors.ground,{0,0,0})
	make_actor(all_actors.shader,{0,0,0})
	make_actor(all_actors.cube,{2.5,-2.5,2})
	
	--
	plyr=make_plyr(0,0,6.5,0.5)		
end

-->8
-- unpack models
local mem=0x1000
function unpack_int()
	local i=peek(mem)
	mem+=1
	return i
end
function unpack_float(scale)
	local f=(unpack_int()-128)/32	
	return f*(scale or 1)
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	for i=1,unpack_int() do
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end
	return s
end
function unpack_models()
	-- for all models
	for m=1,unpack_int() do
		local model,name,scale={},unpack_string(),unpack_int()
		printh("model:"..name)
		
		-- vertices
		model.v={}
		for i=1,unpack_int() do
			add(model.v,{unpack_float(scale),unpack_float(scale),unpack_float(scale)})
		end
		printh("v:"..#model.v)
		
		-- faces
		model.f={}
		for i=1,unpack_int() do
			local f={ni=i,vi={},c=unpack_int(),double_sided=unpack_int()==1 or nil,cast_shadows=unpack_int()==1 or nil}
			-- vertex indices
			for i=1,unpack_int() do
				add(f.vi,unpack_int())
			end
			printh("f.v:"..#f.vi)
			add(model.f,f)
		end
		printh("f:"..#model.f)
		
		-- normals
		model.n={}
		for i=1,unpack_int() do
			add(model.n,{unpack_float(),unpack_float(),unpack_float()})
		end
		printh("n:"..#model.n)
			
		-- n.p cache	
		model.cp={}
		for i=1,#model.f do
			local f,n=model.f[i],model.n[i]
			add(model.cp,v_dot(n,model.v[f.vi[1]]))
		end			

		-- merge with existing model
		all_models[name]=clone(model,all_models[name])
	end
end

-->8

-- edge rasterizer
function polyfill(p,col)
 if(#p<2) return
	color(col)
	local p0,nodes=p[#p],{}
	-- band vs. flr: -0.20%
	local x0,y0=cam:project2d(p0)

	for i=1,#p do
		local p1=p[i]
		local x1,y1=cam:project2d(p1)
		-- backup before any swap
		local _x1,_y1=x1,y1
		if(y0>y1) x0,y0,x1,y1=x1,y1,x0,y0
		-- exact slope
		local dx=(x1-x0)/(y1-y0)
		if(y0<0) x0-=y0*dx y0=0
		-- subpixel shifting (after clipping)
		local cy0=ceil(y0)
		x0+=(cy0-y0)*dx
		for y=cy0,min(ceil(y1)-1,127) do
			local x=nodes[y]
			if x then
				rectfill(x,y,x0,y)
			else
				nodes[y]=x0
			end
			x0+=dx
		end
		-- next vertex
		x0,y0=_x1,_y1
	end
end
-->8
-- #putaflipinit
function cflip() if(slowflip)flip()
end
ospr=spr
function spr(...)
ospr(...)
cflip()
end
osspr=sspr
function sspr(...)
osspr(...)
cflip()
end
omap=map
function map(...)
omap(...)
cflip()
end
orect=rect
function rect(...)
orect(...)
cflip()
end
orectfill=rectfill
function rectfill(...)
orectfill(...)
cflip()
end
ocircfill=circfill
function circfill(...)
ocircfill(...)
cflip()
end
ocirc=circ
function circ(...)
ocirc(...)
cflip()
end
oline=line
function line(...)
oline(...)
cflip()
end
opset=pset
psetctr=0
function pset(...)
opset(...)
psetctr+=1
if(slowflip and psetctr%4==0)flip()
end
odraw=_draw
function _draw()
if(slowflip)extcmd("rec")
odraw()
if(slowflip)for i=0,99 do flip() end extcmd("video")cls()stop("gif saved")
end
menuitem(1,"put a flip in it!",function() slowflip=not slowflip end)
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000052e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000013b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000249000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000156000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000d67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000028e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000049a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005d6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ef7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3070e0a1d19101717110c002020202020e0e020e0e0202020e02020e0e0e0e0e0e0e02360e36360ed9d90e36d90ed9906000004010403020600000405090b080
30000040102060508000004030408070d0000040508040107000004090a0c0b06000004070c0a0606000004060a090506000004080b0c07090080a080806080a
080806080808080a08060808060808060808060850f1a1d102e110903ac608892797892778088a0808c99708c978d5c608862797862778909000104010405020
90001040205060309000104010306040900010404070805090001040508090609000104060907040900010407010208090001040802030909000104090301070
9059c8b646070859c859b6c8b6c90708b6c8590886b6080a0808865940e002d001108007070707090707070907090909070709090709070909090960c0001040
10204030c000104030408070c000104070806050c000104050602010c000104030705010c0001040804020606006080808080a0a0808080806080608080a0800
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008880888080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00800080008280228020800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00280828008880008008200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00028202808280008082000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00002000208880008080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002220002020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666000000000
00000000086666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663000000000
00000000088666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633000000000
00000000088866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666333000000000
00000000088886666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663333000000000
00000000088888666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633333000000000
00000000088888866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666333333000000000
00000000088888886666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663333333000000000
00000000088888888666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633333333000000000
00000000088888888866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666333333333000000000
00000000088888888886666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663333333333000000000
00000000088888888888666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633333333333000000000
00000000088888888888866666666666666666666666666666666666666666666666666666666666666666666666666666666666666333333333333000000000
00000000088888888888886666666666666666666666666666666666666666666666666666666666666666666666666666666666663333333333333000000000
00000000088888888888888666666666666666666666666666666666666666666666666666666666666666666666666666666666633333333333333000000000
00000000088888888888888866666666666666666666666666666666666666666666666666666666666666666666666666666666333333333333333000000000
00000000088888888888888886666666666666666666666666666666666666666666666666666666666666666666666666666663333333333333333000000000
00000000088888888888888888666666666666666666666666666666666666666666666666666666666666666666666666666633333333333333333000000000
00000000088888888888888888866666666666666666666666666666666666666666666666666666666666666666666666666333333333333333333000000000
00000000088888888888888888886666666666666666666666666666666666666666666666666666666666666666666666663333333333333333333000000000
00000000088888888888888888888666666666666666666666666666666666666666666666666666666666666666666666633333333333333333333000000000
00000000088888888888888888888866666666666666666666666677777777777777777777666666666666666666666666333333333333333333333000000000
00000000088888888888888888888886666666666666666666666677777777777777777776666666666666666666666663333333333333333333333000000000
00000000088888888888888888888888666666666666666666666667777777777777777776666666666666666666666633333333333333333333333000000000
00000000088888888888888888888888866666666666666666666667777777777777777776666666666666666666666333333333333333333333333000000000
00000000088888888888888888888888886666666666666666666667777777777777777766666666666666666666663333333333333333333333333000000000
00000000088888888888888888888888888666666666666666666667777777777777777766666666666666666666633333333333333333333333333000000000
00000000088888888888888888888888888866666666666666666666777777777777777766666666666666666666333333333333333333333333333000000000
00000000088888888888888888888888888886666666666666666666777777777777777666666666666666666663333333333333333333333333333000000000
00000000088888888888888888888888888888666666666666666666777777777777777666666666666666666633333333333333333333333333333000000000
00000000088888888888888888888888888888866666666666666666666666666666666666666666666666666333333333333333333333333333333000000000
00000000088888888888888888888888888888886666666666666666666666666666666666666666666666663333333333333333333333333333333000000000
00000000088888888888888888888888888888888666666666666666666666666666666666666666666666633333333333333333333333333333333000000000
00000000088888888888888888888888888888888866666666666666666666666666666666666666666666333333333333333333333333333333333000000000
00000000088888888888888888888888888888888886666666666666666666666666666666666666666663333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddddddddddcdddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddddddddccccdddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddccccccccccddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddcccccccc1cddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddccccc11111cddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddcc11111111ccdddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dd11111111111cdddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dd11111111111ccddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dd111111111111cddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddd11111111111cddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddd11111111111cddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888dddd11111111111ddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddddd111111ddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888888888ddddd111dddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888882888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888882888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888822888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888822888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888222888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888888222888dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888882222288dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888882222288dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888822222288dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888822222288dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888222222288dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888222222228dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
00000000088888888888888888888888888222222228dddddddddddddddddddddddddddddddddddddddd33333333333333333333333333333333333000000000
000000000888888888888888888888888882222222286666666666d6666666666666666666666666666633333333333333333333333333333333333000000000
0000000008888888888888888888888888822222222dddddddddddd6666666666666666666666666666663333333333333333333333333333333333000000000
000000000888888888888888888888888882222222ddddddddddddd6666666666666666666666666666666333333333333333333333333333333333000000000
00000000088888888888888888888888888222222dddddddddddddd6666666666666666666666666666666633333333333333333333333333333333000000000
0000000008888888888888888888888888822222ddddddddddddddd6666666666666666666666666666666663333333333333333333333333333333000000000
0000000008888888888888888ccccccccccccccdddddddddddddddd6666666666666666666666666666666666333333333333333333333333333333000000000
000000000888888888888888cccccccccccccccdddddddddddddddd6666666666666666666666666666666666633333333333333333333333333333000000000
0000000008888888888888cccccccccccccccccddddddddddddd6666666666666666666666666666666666666663333333333333333333333333333000000000
000000000888888888888ccccccccccccccccccddddddddd66666666666666666666666666666666666666666666333333333333333333333333333000000000
0000000008888888888cccccccccccccccccccc66666666666666666666666666666666666666666666666666666633333333333333333333333333000000000
000000000888888888ccccccccccccccccccccc66666666666666666666666666666666666666666666666666666663333333333333333333333333000000000
0000000008888888ccccccccccccccccccccccc66666666666666666666666666666666666666666666666666666666333333333333333333333333000000000
000000000888888811111111111111111cccccc66666666666666666666666666666666666666666666666666666666633333333333333333333333000000000
000000000888888211111111111111111cccccc66666666666666666666666666666666666666666666666666666666663333333333333333333333000000000
000000000888888211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666333333333333333333333000000000
000000000888888211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666633333333333333333333000000000
000000000888888211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666663333333333333333333000000000
000000000888882211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666666333333333333333333000000000
000000000888882211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666666633333333333333333000000000
000000000888882211111111111111111cccccc66666666666666666666666666666666666666666666666666666666666666663333333333333333000000000
000000000888822211111111111111111ccccc666666666666666666666666666666666666666666666666666666666666666666333333333333333000000000
000000000888822211111111111111111cccc6666666666666666666666666666666666666666666666666666666666666666666633333333333333000000000
000000000888822211111111111111111cccc6666666666666666666666666666666666666666666666666666666666666666666663333333333333000000000
000000000888822211111111111111111ccc66666666666666666666666666666666666666666666666666666666666666666666666333333333333000000000
000000000888222211111111111111111cc666666666666666666666666666666666666666666666666666666666666666666666666633333333333000000000
000000000888222211111111111111111cc666666666666666666666666666666666666666666666666666666666666666666666666663333333333000000000
000000000888222211111111111111111c6666666666666666666666666666666666666666666666666666666666666666666666666666333333333000000000
00000000088222221111111111111111166666666666666666666666666666666666666666666666666666666666666666666666666666633333333000000000
00000000088222221111111111111111166666666666666666666666666666666666666666666666666666666666666666666666666666663333333000000000
000000000882222ddddddddddddddd66666666666666666666666666666666666666666666666666666666666666666666666666666666666333333000000000
00000000088222dddddddddddddd6666666666666666666666666666666666666666666666666666666666666666666666666666666666666633333000000000
0000000008222dddddddddddddd66666666666666666666666666666666666666666666666666666666666666666666666666666666666666663333000000000
000000000822ddddddddddddd6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666333000000000
00000000082dddddddddddd666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633000000000
0000000002ddddddddddd66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

